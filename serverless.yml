service: ${self:custom.serviceName}

plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  customDomain:
    domainName: reports-${opt:stage, 'dev'}.perfsys.io
  service: ${self:service}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  leadGenerationReportTable: ${self:service}-leadGenerationReport-${self:custom.stage}
  developerWeeklyReportTable: ${self:service}-developerWeeklyReport-${self:custom.stage}
  linkedInReportsTableName: ${self:service}-linkedInReports-${self:custom.stage}
  prefix: ${opt:prefix, 'perfsys'}
  # prefix: ${opt:prefix, 'grobakidze'}
  serviceName: ${self:custom.prefix}-cloud-reports
  
provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - !GetAtt leadGenerationReportTable.Arn
        - !GetAtt developerWeeklyReportTable.Arn
        - !GetAtt linkedInReportsTable.Arn
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - !Join ['', [!GetAtt TableDumpsBucket.Arn, /*]]

  environment:
    LEAD_GENERATION_REPORT_TABLE_NAME: ${self:custom.leadGenerationReportTable}
    DEVELOPER_WEEKLY_REPORT_TABLE_NAME: ${self:custom.developerWeeklyReportTable}
    LINKED_IN_REPORTS_TABLE_NAME: ${self:custom.linkedInReportsTableName}
    TABLE_DUMPS_BUCKET_NAME: !Ref TableDumpsBucket

package:
  exclude:
    - frontend/**

#layers:
#  nodeModules:
#    path: layer/nodejs/node_modules
#    name: ${self:service}-node-modules-${opt:stage, self:provider.stage}
#    description: "Shared node modules"
#    compatibleRuntimes:
#      - nodejs10.x


functions:
  index:
    handler: index.handler
    events:
      - http:
          path: /
          method: GET

  health:
    handler: index.handler
    events:
      - http:
          path: /health
          method: GET
          cors: true

  saveLeadGenerationReport:
    handler: index.handler
    events:
      - http:
          path: /report/lead-generation
          method: POST
          cors: true

  getDeveloperWeeklyReport:
    handler: index.handler
    events:
      - http:
          path: /report/developer/week
          method: POST
          cors: true

  getDeveloperDailyReport:
    handler: index.handler
    events:
      - http:
          path: /report/developer/day
          method: POST
          cors: true

  saveDeveloperAtomicReport:
    handler: index.handler
    events:
      - http:
          path: /report/developer/job
          method: POST
          cors: true

  deleteDeveloperAtomicReport:
    handler: index.handler
    events:
      - http:
          path: /report/developer/job
          method: DELETE
          cors: true
          
  getInfoFromTrello:
    handler: index.handler
    environment:
      TRELLO_API_KEY: ${env:TRELLO_API_KEY}
      TRELLO_OAUTH_TOKEN: ${env:TRELLO_OAUTH_TOKEN}
    events:
      - http:
          path: /trello
          method: GET
          cors: true

  postLinkedInReport:
    handler: index.handler
    events:
      - http:
          path: '/reports/linked-in'
          method: POST
          cors: true


  getLinkedInReports:
    handler: index.handler
    events:
      - http:
          path: '/reports/linked-in'
          method: GET
          cors: true

  cronDataSerializer:
    handler: index.cronDataSerializer
    events:
      - schedule: rate(8 hours)

resources:
  Resources:
    leadGenerationReportTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.leadGenerationReportTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    developerWeeklyReportTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.developerWeeklyReportTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE

    linkedInReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.linkedInReportsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    TableDumpsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-cloud-reports-database-dumps
